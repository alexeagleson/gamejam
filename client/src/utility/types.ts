/*
 Generated by typeshare 1.0.0
*/

export type UserId = number;

/** A single entry in the game log */
export type LogMessage = string;

/**
 * A single unit change in relative position meant to be added to a `Position`
 * values intended to be either 1, 0 or -1 and transformed from a `Direction`
 */
export interface Delta {
	x: number;
	y: number;
}

/** Represents the location of something on a 2D grid */
export interface Position {
	x: number;
	y: number;
}

/** Information about a specific player's current position */
export interface PlayerPosition {
	id: UserId;
	pos: Position;
}

/** Information about a player */
export interface PlayerDetails {
	name: string;
}

/** Information about the game map */
export interface MapDimensions {
	width: number;
	height: number;
}

/** Supported key inputs */
export enum Key {
	Up = "up",
	Down = "down",
	Left = "left",
	Right = "right",
}

/** An input interaction from the client */
export type ClientMessage = 
	| { type: "tileHover", content: Position }
	| { type: "tileClick", content: Position }
	| { type: "initialize", content?: undefined }
	| { type: "keypress", content: Key };

/** Communicates information about the active game to the client */
export type ServerMessage = 
	| { type: "removedPlayer", content: UserId }
	| { type: "allPlayerPositions", content: PlayerPosition[] }
	| { type: "playerPosition", content: PlayerPosition }
	| { type: "tileHover", content?: PlayerDetails }
	| { type: "tileClick", content: LogMessage }
	| { type: "moveCount", content: number };

